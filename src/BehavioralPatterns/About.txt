Поведенческие паттерны описывают наиболее эффективные пути взаимодействия между классами
и объектами в системе. В паттернах уровня класса обязанности распределяются с
помощью наследования (шаблонный метод и интерпретатор).
Паттерны уровня объектов используют композицию (остальные паттерны — группы).

        _____________________________________________________

Группа поведенческих паттернов состоит из следующих шаблонов:

Цепочка обязанностей (Chain of responsibility)
Команда (Command)
Интерпретатор (Interpreter)
Итератор (Iterator)
Посредник (Mediator)
Хранитель (Memento)
Наблюдатель (Observer)
Состояние (State)
Стратегия (Strategy)
Шаблонный метод (Template method)
Посетитель (Visitor)

        _________________________________________________________

Цепочка обязанностей — передает запрос последовательно по цепочке обработчиков.
При этом каждый разработчик определяет сам, обработать запрос самостоятельно
или передать следующему обработчику.

Команда — преобразует запросы в объекты, после чего созданные объекты могут быть переданы
в качестве аргументов методов. Позволяет легко реализовать отмену операций.

Интерпретатор - предназначен для решения периодически повторяемой проблемы, которая
может быть описана некими правилами.

Итератор — реализует последовательный обход элементов составного объекта (коллекции).

Посредник — снижает степень связанности множества классов между собой за счет
перемещения этих связей в класс-посредник.

Хранитель — предназначен для сохранения и восстановления предыдущего состояния объекта,
скрывая при этом конкретную реализацию.

Наблюдатель — реализует подписку и ответную реакцию одних объектов на события,
происходящие с другими объектами.

Состояние — позволяет изменять поведение объектов в зависимости от их состояния.

Стратегия — предназначен для определения семейства схожих алгоритмов и размещения
их в отдельные классы, после чего алгоритмы можно заменять в рантайме.

Шаблонный метод — разбивает алгоритм на шаги, ответственность за отдельные шаги
распределяется между подклассами и позволяет этим подклассам изменять шаги алгоритма.

Посетитель - добавляет объектам новое поведение не изменяя при этом классы объектов,
поведение которых изменяется.
